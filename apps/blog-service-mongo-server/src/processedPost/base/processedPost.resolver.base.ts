/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProcessedPost } from "./ProcessedPost";
import { ProcessedPostCountArgs } from "./ProcessedPostCountArgs";
import { ProcessedPostFindManyArgs } from "./ProcessedPostFindManyArgs";
import { ProcessedPostFindUniqueArgs } from "./ProcessedPostFindUniqueArgs";
import { CreateProcessedPostArgs } from "./CreateProcessedPostArgs";
import { UpdateProcessedPostArgs } from "./UpdateProcessedPostArgs";
import { DeleteProcessedPostArgs } from "./DeleteProcessedPostArgs";
import { ProcessedPostService } from "../processedPost.service";
@graphql.Resolver(() => ProcessedPost)
export class ProcessedPostResolverBase {
  constructor(protected readonly service: ProcessedPostService) {}

  async _processedPostsMeta(
    @graphql.Args() args: ProcessedPostCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProcessedPost])
  async processedPosts(
    @graphql.Args() args: ProcessedPostFindManyArgs
  ): Promise<ProcessedPost[]> {
    return this.service.processedPosts(args);
  }

  @graphql.Query(() => ProcessedPost, { nullable: true })
  async processedPost(
    @graphql.Args() args: ProcessedPostFindUniqueArgs
  ): Promise<ProcessedPost | null> {
    const result = await this.service.processedPost(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProcessedPost)
  async createProcessedPost(
    @graphql.Args() args: CreateProcessedPostArgs
  ): Promise<ProcessedPost> {
    return await this.service.createProcessedPost({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ProcessedPost)
  async updateProcessedPost(
    @graphql.Args() args: UpdateProcessedPostArgs
  ): Promise<ProcessedPost | null> {
    try {
      return await this.service.updateProcessedPost({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProcessedPost)
  async deleteProcessedPost(
    @graphql.Args() args: DeleteProcessedPostArgs
  ): Promise<ProcessedPost | null> {
    try {
      return await this.service.deleteProcessedPost(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
